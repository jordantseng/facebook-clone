{"version":3,"sources":["webpack:///src/app/feature-modules/profile/edit-password/edit-password.component.ts","webpack:///src/app/feature-modules/profile/edit-password/edit-password.component.html","webpack:///src/app/feature-modules/profile/edit-profile/edit-profile.component.ts","webpack:///src/app/feature-modules/profile/edit-profile/edit-profile.component.html","webpack:///src/app/feature-modules/profile/profile-home/profile-home.component.ts","webpack:///src/app/feature-modules/profile/profile-home/profile-home.component.html","webpack:///src/app/feature-modules/profile/profile-routing.module.ts","webpack:///src/app/feature-modules/profile/profile.module.ts","webpack:///src/app/feature-modules/profile/profile.service.ts","webpack:///src/app/validators/confrim-password.validator.ts","webpack:///src/app/validators/password.validator.ts"],"names":["EditPasswordComponent","fb","dialogRef","validPassword","data","form","group","currentPassword","required","validate","newPassword","confirmedNewPassword","validators","close","markAllAsTouched","invalid","value","onEditFormClick","selector","templateUrl","styleUrls","EditProfileComponent","name","ProfileHomeComponent","route","router","postsService","profileService","authService","dialog","posts","userSub","user$","subscribe","user","loadingProfile","loggedinUser","postSub","posts$","loadingPost","queryParamMap","fetchMyPosts","id","deleteMyPost","event","avatar","target","files","updateMyAvatar","avatarPath","next","reloadPage","dialogConfig","disableClose","autoFocus","width","open","afterClosed","pipe","updateMyProfile","updateMyPassword","postId","likePost","_id","unsubscribe","navigate","relativeTo","queryParams","ts","Date","now","toString","skipLocationChange","queryParamsHandling","routes","path","component","ProfileRoutingModule","forChild","imports","exports","ProfileModule","declarations","entryComponents","ProfileService","http","url","formValues","put","password","post","res","err","invalidPassword","patch","fd","FormData","append","providedIn","confirmPasswordValidator","get","dirty","passwordNotMatch","ValidPassword","control","validateMyPassword"],"mappings":"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","file":"feature-modules-profile-profile-module-es5.js","sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { confirmPasswordValidator } from '../../../validators/confrim-password.validator';\nimport { ValidPassword } from '../../../validators/password.validator';\n\n@Component({\n  selector: 'app-edit-password',\n  templateUrl: './edit-password.component.html',\n  styleUrls: ['./edit-password.component.css'],\n})\nexport class EditPasswordComponent implements OnInit {\n  form: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private dialogRef: MatDialogRef<EditPasswordComponent>,\n    private validPassword: ValidPassword,\n    @Inject(MAT_DIALOG_DATA) data\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group(\n      {\n        currentPassword: ['', Validators.required, this.validPassword.validate],\n        newPassword: ['', Validators.required],\n        confirmedNewPassword: ['', Validators.required],\n      },\n      {\n        validators: [confirmPasswordValidator],\n      }\n    );\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n\n  onEditFormClick() {\n    this.form.markAllAsTouched();\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.dialogRef.close(this.form.value);\n  }\n}\n","<h2 mat-dialog-title>Change Password</h2>\n<form [formGroup]=\"form\" (ngSubmit)=\"onEditFormClick()\">\n  <mat-dialog-content>\n    <app-input\n      [control]=\"form.get('currentPassword')\"\n      label=\"Current Password\"\n      type=\"password\"\n    ></app-input>\n\n    <app-input\n      [control]=\"form.get('newPassword')\"\n      label=\"New Password\"\n      type=\"password\"\n    ></app-input>\n\n    <app-input\n      [control]=\"form.get('confirmedNewPassword')\"\n      label=\"Confrim new password\"\n      type=\"password\"\n    ></app-input>\n\n    <div *ngIf=\"form.invalid\">\n      <mat-error *ngIf=\"form.hasError('passwordNotMatch')\">\n        Password Not Match\n      </mat-error>\n    </div>\n  </mat-dialog-content>\n\n  <mat-dialog-actions align=\"end\">\n    <button (click)=\"close()\" type=\"button\" class=\"mat-raised-button\">\n      Close\n    </button>\n    <button\n      type=\"submit\"\n      mat-raised-button\n      color=\"primary\"\n      [disabled]=\"form.invalid || form.pending\"\n    >\n      Change\n    </button>\n  </mat-dialog-actions>\n</form>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-edit-profile',\n  templateUrl: './edit-profile.component.html',\n  styleUrls: ['./edit-profile.component.css'],\n})\nexport class EditProfileComponent implements OnInit {\n  form: FormGroup;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: { name: string },\n    private fb: FormBuilder,\n    private dialogRef: MatDialogRef<EditProfileComponent>\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      name: [this.data.name, Validators.required],\n    });\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n\n  onEditFormClick() {\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.dialogRef.close(this.form.value);\n  }\n}\n","<h2 mat-dialog-title>Edit Profile</h2>\n<form [formGroup]=\"form\" (ngSubmit)=\"onEditFormClick()\">\n  <mat-dialog-content>\n    <app-input [control]=\"form.get('name')\" label=\"Name\"></app-input>\n  </mat-dialog-content>\n\n  <mat-dialog-actions align=\"end\">\n    <button (click)=\"close()\" type=\"button\" class=\"mat-raised-button\">\n      Close\n    </button>\n    <button type=\"submit\" mat-raised-button color=\"primary\">Edit</button>\n  </mat-dialog-actions>\n</form>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\n\nimport { Subscription } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\n\nimport { User } from 'src/app/interfaces/auth.model';\nimport { Post } from 'src/app/interfaces/post.model';\n\nimport { PostsService } from '../../posts/posts.service';\nimport { ProfileService } from '../profile.service';\n\nimport { EditProfileComponent } from '../edit-profile/edit-profile.component';\nimport { EditPasswordComponent } from '../edit-password/edit-password.component';\nimport { AuthService } from 'src/app/feature-modules/auth/auth.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-profile-home',\n  templateUrl: './profile-home.component.html',\n  styleUrls: ['./profile-home.component.css'],\n})\nexport class ProfileHomeComponent implements OnInit, OnDestroy {\n  posts: Post[] = [];\n  loggedinUser: User;\n  loadingProfile: boolean;\n  loadingPost: boolean;\n  userSub: Subscription;\n  postSub: Subscription;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private postsService: PostsService,\n    private profileService: ProfileService,\n    private authService: AuthService,\n    public dialog: MatDialog\n  ) {}\n\n  ngOnInit(): void {\n    this.userSub = this.authService.user$.subscribe((user) => {\n      this.loadingProfile = false;\n      this.loggedinUser = user;\n    });\n\n    this.postSub = this.postsService.posts$.subscribe((posts) => {\n      this.loadingPost = false;\n      this.posts = posts;\n    });\n\n    // initiate posts and re-render after created new post\n    this.route.queryParamMap.subscribe(() => {\n      this.loadingPost = true;\n      this.postsService.fetchMyPosts();\n    });\n  }\n\n  onDeletePost(id: string) {\n    this.postsService.deleteMyPost(id);\n  }\n\n  onChangeAvatar(event: Event) {\n    this.loadingProfile = true;\n    const avatar = (event.target as HTMLInputElement).files[0];\n\n    this.profileService.updateMyAvatar(avatar).subscribe((avatarPath) => {\n      this.authService.user$.next({\n        ...this.loggedinUser,\n        avatar: avatarPath,\n      });\n      this.reloadPage();\n    });\n  }\n\n  onOpenDetailsModal() {\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n    dialogConfig.width = '500px';\n\n    dialogConfig.data = {\n      name: this.loggedinUser.name,\n    };\n\n    const dialogRef = this.dialog.open(EditProfileComponent, dialogConfig);\n\n    // receive the data after closing modal\n    dialogRef\n      .afterClosed()\n      .pipe(\n        filter((data) => !!data),\n        tap(() => (this.loadingProfile = true)),\n        switchMap((data) =>\n          this.profileService.updateMyProfile({\n            ...this.loggedinUser,\n            name: data.name,\n          })\n        )\n      )\n      .subscribe((user) => {\n        this.authService.user$.next(user);\n        this.reloadPage();\n      });\n  }\n\n  onOpenPasswordModal() {\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n    dialogConfig.width = '500px';\n\n    const dialogRef = this.dialog.open(EditPasswordComponent, dialogConfig);\n\n    dialogRef\n      .afterClosed()\n      .pipe(\n        filter((data) => !!data),\n        tap(() => (this.loadingProfile = true)),\n        switchMap((data) => this.profileService.updateMyPassword(data))\n      )\n      .subscribe(() => {\n        this.loadingProfile = false;\n      });\n  }\n\n  onClickLike({ postId }) {\n    this.postsService.likePost(postId, this.loggedinUser._id);\n  }\n\n  ngOnDestroy() {\n    this.userSub.unsubscribe();\n    this.postSub.unsubscribe();\n  }\n\n  private reloadPage() {\n    this.router.navigate(['./'], {\n      relativeTo: this.route,\n      queryParams: { ts: Date.now().toString() },\n      skipLocationChange: true,\n      queryParamsHandling: 'merge',\n    });\n  }\n}\n","<app-spinner *ngIf=\"loadingProfile || loadingPost\"></app-spinner>\n\n<div *ngIf=\"loggedinUser && !loadingPost && !loadingProfile\" class=\"container\">\n  <div class=\"profile\">\n    <mat-card>\n      <div class=\"avatar-container\">\n        <img\n          class=\"avatar\"\n          mat-card-avatar\n          [src]=\"loggedinUser.avatar\"\n          (click)=\"avatar.click()\"\n        />\n        <input #avatar hidden type=\"file\" (change)=\"onChangeAvatar($event)\" />\n      </div>\n      <div class=\"info\">\n        <mat-card-title>{{ loggedinUser.name }}</mat-card-title>\n        <mat-card-subtitle>{{ loggedinUser.email }}</mat-card-subtitle>\n      </div>\n      <div class=\"card-actions\">\n        <button\n          id=\"edit-details\"\n          mat-stroked-button\n          onclick=\"this.blur()\"\n          (click)=\"onOpenDetailsModal()\"\n        >\n          <!-- Hack: onclick=\"this.blur()\" to get rid of .cdk-focused .cdk-program-focused-->\n          Edit Details\n        </button>\n        <button\n          id=\"change-password\"\n          mat-stroked-button\n          onclick=\"this.blur()\"\n          (click)=\"onOpenPasswordModal()\"\n        >\n          Change Password\n        </button>\n      </div>\n    </mat-card>\n  </div>\n\n  <div class=\"profile-right\">\n    <app-create-post></app-create-post>\n    <app-post-list\n      [posts]=\"posts\"\n      [loggedinUser]=\"loggedinUser\"\n      (deleteClicked)=\"onDeletePost($event)\"\n      (postLiked)=\"onClickLike($event)\"\n    ></app-post-list>\n\n    <p *ngIf=\"posts.length <= 0 && !loadingPost\" class=\"mat-body-1 info-text\">\n      No posts added yet.\n    </p>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ProfileHomeComponent } from './profile-home/profile-home.component';\n\nconst routes: Routes = [{ path: '', component: ProfileHomeComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProfileRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { ProfileHomeComponent } from './profile-home/profile-home.component';\nimport { EditProfileComponent } from './edit-profile/edit-profile.component';\nimport { EditPasswordComponent } from './edit-password/edit-password.component';\n\nimport { PostsModule } from '../posts/posts.module';\nimport { SharedModule } from 'src/app/shared-module/shared.module';\nimport { ProfileRoutingModule } from './profile-routing.module';\nimport { AngularMaterialModule } from 'src/app/angular-material.module';\n\n@NgModule({\n  declarations: [\n    ProfileHomeComponent,\n    EditProfileComponent,\n    EditPasswordComponent,\n  ],\n  imports: [\n    CommonModule,\n    ProfileRoutingModule,\n    PostsModule,\n    ReactiveFormsModule,\n    SharedModule,\n    AngularMaterialModule,\n  ],\n  entryComponents: [EditProfileComponent, EditPasswordComponent],\n})\nexport class ProfileModule {}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { User } from 'src/app/interfaces/auth.model';\nimport { catchError, map } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProfileService {\n  private readonly url = '/api/user';\n\n  constructor(private http: HttpClient) {}\n\n  updateMyProfile(formValues) {\n    return this.http.put<User>(`${this.url}/me`, formValues);\n  }\n\n  validateMyPassword(password) {\n    return this.http\n      .post<{ [key: string]: string }>(`${this.url}/me/password`, {\n        currentPassword: password,\n      })\n      .pipe(\n        map((res) => null),\n        catchError((err) => of({ invalidPassword: true }))\n      );\n  }\n\n  updateMyPassword(formValues) {\n    return this.http.patch<{ message: string }>(\n      `${this.url}/me/password`,\n      formValues\n    );\n  }\n\n  updateMyAvatar(avatar: File) {\n    const fd = new FormData();\n    fd.append('avatar', avatar);\n\n    return this.http.put<string>(`${this.url}/me/avatar`, fd);\n  }\n}\n","import { AbstractControl } from '@angular/forms';\nexport const confirmPasswordValidator = (form: AbstractControl) => {\n  const { newPassword, confirmedNewPassword } = form.value;\n\n  if (\n    form.get('newPassword').dirty &&\n    form.get('confirmedNewPassword').dirty &&\n    newPassword !== confirmedNewPassword\n  ) {\n    return { passwordNotMatch: true };\n  }\n\n  return null;\n};\n","import { Injectable } from '@angular/core';\nimport {\n  AbstractControl,\n  AsyncValidator,\n  ValidationErrors,\n} from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { ProfileService } from '../feature-modules/profile/profile.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ValidPassword implements AsyncValidator {\n  constructor(private profileService: ProfileService) {}\n\n  validate = (\n    control: AbstractControl\n  ): Observable<ValidationErrors | null> => {\n    return this.profileService.validateMyPassword(control.value);\n  };\n}\n"]}