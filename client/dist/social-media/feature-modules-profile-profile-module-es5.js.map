{"version":3,"sources":["webpack:///src/app/feature-modules/profile/edit-password/edit-password.component.ts","webpack:///src/app/feature-modules/profile/edit-password/edit-password.component.html","webpack:///src/app/feature-modules/profile/edit-profile/edit-profile.component.ts","webpack:///src/app/feature-modules/profile/edit-profile/edit-profile.component.html","webpack:///src/app/feature-modules/profile/profile-home/profile-home.component.ts","webpack:///src/app/feature-modules/profile/profile-home/profile-home.component.html","webpack:///src/app/feature-modules/profile/profile-routing.module.ts","webpack:///src/app/feature-modules/profile/profile.module.ts","webpack:///src/app/feature-modules/profile/profile.service.ts","webpack:///src/app/validators/confrim-password.validator.ts","webpack:///src/app/validators/password.validator.ts"],"names":["EditPasswordComponent","fb","dialogRef","validPassword","data","form","group","currentPassword","required","validate","newPassword","confirmedNewPassword","validators","close","markAllAsTouched","invalid","value","onEditFormClick","selector","templateUrl","styleUrls","EditProfileComponent","name","ProfileHomeComponent","router","route","postsService","profileService","authService","dialog","posts","queryParamMap","pipe","loading","getMyPosts","subscribe","userSub","user$","user","loggedinUser","id","deleteMyPost","reloadPage","event","avatar","target","files","updateMyAvatar","dialogConfig","disableClose","autoFocus","width","open","afterClosed","updateMyProfile","updateMyPassword","unsubscribe","navigate","relativeTo","queryParams","ts","Date","now","toString","queryParamsHandling","skipLocationChange","routes","path","component","ProfileRoutingModule","forChild","imports","exports","ProfileModule","declarations","entryComponents","ProfileService","http","url","formValues","put","next","password","post","res","err","invalidPassword","patch","fd","FormData","append","avatarPath","getValue","providedIn","confirmPasswordValidator","get","dirty","passwordNotMatch","ValidPassword","control","validateMyPassword"],"mappings":"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","file":"feature-modules-profile-profile-module-es5.js","sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { confirmPasswordValidator } from '../../../validators/confrim-password.validator';\nimport { ValidPassword } from '../../../validators/password.validator';\n\n@Component({\n  selector: 'app-edit-password',\n  templateUrl: './edit-password.component.html',\n  styleUrls: ['./edit-password.component.css'],\n})\nexport class EditPasswordComponent implements OnInit {\n  form: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private dialogRef: MatDialogRef<EditPasswordComponent>,\n    private validPassword: ValidPassword,\n    @Inject(MAT_DIALOG_DATA) data\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group(\n      {\n        currentPassword: ['', Validators.required, this.validPassword.validate],\n        newPassword: ['', Validators.required],\n        confirmedNewPassword: ['', Validators.required],\n      },\n      {\n        validators: [confirmPasswordValidator],\n      }\n    );\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n\n  onEditFormClick() {\n    this.form.markAllAsTouched();\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.dialogRef.close(this.form.value);\n  }\n}\n","<h2 mat-dialog-title>Change Password</h2>\n<form [formGroup]=\"form\" (ngSubmit)=\"onEditFormClick()\">\n  <mat-dialog-content>\n    <div>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Current Password</mat-label>\n        <input matInput formControlName=\"currentPassword\" />\n        <mat-error *ngIf=\"form.get('currentPassword').invalid\">\n          <ng-container\n            *ngIf=\"form.get('currentPassword').getError('required')\"\n          >\n            Current password is required\n          </ng-container>\n          <ng-container\n            *ngIf=\"form.get('currentPassword').getError('invalidPassword')\"\n          >\n            Incorrect password\n          </ng-container>\n        </mat-error>\n        <mat-hint *ngIf=\"form.get('currentPassword').pending\">\n          Validating\n        </mat-hint>\n      </mat-form-field>\n    </div>\n    <div>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>New Password</mat-label>\n        <input matInput formControlName=\"newPassword\" />\n        <mat-error *ngIf=\"form.get('newPassword').getError('required')\">\n          New password is required.\n        </mat-error>\n      </mat-form-field>\n    </div>\n    <div>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Confrim new password</mat-label>\n        <input matInput formControlName=\"confirmedNewPassword\" />\n        <mat-error\n          *ngIf=\"form.get('confirmedNewPassword').getError('required')\"\n        >\n          Confirmed new password is required.\n        </mat-error>\n      </mat-form-field>\n    </div>\n\n    <div *ngIf=\"form.invalid\">\n      <mat-error *ngIf=\"form.hasError('passwordNotMatch')\">\n        Password Not Match\n      </mat-error>\n    </div>\n  </mat-dialog-content>\n\n  <mat-dialog-actions align=\"end\">\n    <button (click)=\"close()\" type=\"button\" class=\"mat-raised-button\">\n      Close\n    </button>\n    <button\n      type=\"submit\"\n      mat-raised-button\n      color=\"primary\"\n      [disabled]=\"form.invalid || form.pending\"\n    >\n      Change\n    </button>\n  </mat-dialog-actions>\n</form>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-edit-profile',\n  templateUrl: './edit-profile.component.html',\n  styleUrls: ['./edit-profile.component.css'],\n})\nexport class EditProfileComponent implements OnInit {\n  form: FormGroup;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: { name: string },\n    private fb: FormBuilder,\n    private dialogRef: MatDialogRef<EditProfileComponent>\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      name: [this.data.name, Validators.required],\n    });\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n\n  onEditFormClick() {\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.dialogRef.close(this.form.value);\n  }\n}\n","<h2 mat-dialog-title>Edit Profile</h2>\n<form [formGroup]=\"form\" (ngSubmit)=\"onEditFormClick()\">\n  <mat-dialog-content>\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Name</mat-label>\n      <input matInput formControlName=\"name\" />\n      <mat-error *ngIf=\"form.get('name').getError('required')\">\n        Name is required.\n      </mat-error>\n    </mat-form-field>\n  </mat-dialog-content>\n\n  <mat-dialog-actions align=\"end\">\n    <button (click)=\"close()\" type=\"button\" class=\"mat-raised-button\">\n      Close\n    </button>\n    <button type=\"submit\" mat-raised-button color=\"primary\">Edit</button>\n  </mat-dialog-actions>\n</form>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\n\nimport { Subscription } from 'rxjs';\nimport { filter, switchMap } from 'rxjs/operators';\n\nimport { User } from 'src/app/interfaces/auth.model';\nimport { Post } from 'src/app/interfaces/post.model';\n\nimport { PostsService } from '../../posts/posts.service';\nimport { ProfileService } from '../profile.service';\n\nimport { EditProfileComponent } from '../edit-profile/edit-profile.component';\nimport { EditPasswordComponent } from '../edit-password/edit-password.component';\nimport { AuthService } from 'src/app/feature-modules/auth/auth.service';\n\n@Component({\n  selector: 'app-profile-home',\n  templateUrl: './profile-home.component.html',\n  styleUrls: ['./profile-home.component.css'],\n})\nexport class ProfileHomeComponent implements OnInit {\n  posts: Post[] = [];\n  loggedinUser: User;\n  loading: boolean;\n  userSub: Subscription;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private postsService: PostsService,\n    private profileService: ProfileService,\n    private authService: AuthService,\n    public dialog: MatDialog\n  ) {}\n\n  ngOnInit(): void {\n    this.route.queryParamMap\n      .pipe(\n        switchMap(() => {\n          this.loading = true;\n          return this.postsService.getMyPosts();\n        })\n      )\n      .subscribe((posts) => {\n        this.posts = posts.data;\n\n        this.loading = false;\n      });\n\n    this.userSub = this.authService.user$.subscribe((user) => {\n      this.loggedinUser = user;\n    });\n  }\n\n  onDeletePost(id: string) {\n    this.loading = true;\n    this.postsService.deleteMyPost(id).subscribe(() => {\n      this.loading = false;\n      this.reloadPage();\n    });\n  }\n\n  onChangeAvatar(event: Event) {\n    this.loading = true;\n    const avatar = (event.target as HTMLInputElement).files[0];\n\n    this.profileService.updateMyAvatar(avatar);\n  }\n\n  onOpenDetailsModal() {\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n    dialogConfig.width = '500px';\n\n    dialogConfig.data = {\n      name: this.loggedinUser.name,\n    };\n\n    const dialogRef = this.dialog.open(EditProfileComponent, dialogConfig);\n\n    dialogRef\n      .afterClosed()\n      .pipe(filter((data) => data))\n      .subscribe((data) => {\n        this.loading = true;\n        this.profileService.updateMyProfile({\n          ...this.loggedinUser,\n          name: data.name,\n        });\n      });\n  }\n\n  onOpenPasswordModal() {\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n    dialogConfig.width = '500px';\n\n    const dialogRef = this.dialog.open(EditPasswordComponent, dialogConfig);\n\n    dialogRef\n      .afterClosed()\n      .pipe(filter((data) => data))\n      .subscribe((data) => {\n        this.loading = true;\n        this.profileService.updateMyPassword(data);\n      });\n  }\n\n  OnDestroy() {\n    this.userSub.unsubscribe();\n  }\n\n  private reloadPage() {\n    this.router.navigate(['./'], {\n      relativeTo: this.route,\n      queryParams: {\n        ts: Date.now().toString(),\n      },\n      queryParamsHandling: 'merge',\n      skipLocationChange: true,\n    });\n  }\n}\n","<app-spinner *ngIf=\"loading\"></app-spinner>\n\n<div *ngIf=\"loggedinUser && !loading\" class=\"container\">\n  <div class=\"profile\">\n    <mat-card>\n      <div class=\"avatar-container\">\n        <img\n          class=\"avatar\"\n          mat-card-avatar\n          [src]=\"loggedinUser.avatar\"\n          (click)=\"avatar.click()\"\n        />\n        <input #avatar hidden type=\"file\" (change)=\"onChangeAvatar($event)\" />\n      </div>\n      <div class=\"info\">\n        <mat-card-title>{{ loggedinUser.name }}</mat-card-title>\n        <mat-card-subtitle>{{ loggedinUser.email }}</mat-card-subtitle>\n      </div>\n      <div class=\"card-actions\">\n        <button\n          id=\"edit-details\"\n          mat-stroked-button\n          onclick=\"this.blur()\"\n          (click)=\"onOpenDetailsModal()\"\n        >\n          <!-- Hack: onclick=\"this.blur()\" to get rid of .cdk-focused .cdk-program-focused-->\n          Edit Details\n        </button>\n        <button\n          id=\"change-password\"\n          mat-stroked-button\n          onclick=\"this.blur()\"\n          (click)=\"onOpenPasswordModal()\"\n        >\n          Change Password\n        </button>\n      </div>\n    </mat-card>\n  </div>\n\n  <div class=\"profile-right\">\n    <app-create-post></app-create-post>\n    <app-post-list\n      [posts]=\"posts\"\n      [loggedinUser]=\"loggedinUser\"\n      (deleteClicked)=\"onDeletePost($event)\"\n    ></app-post-list>\n\n    <p *ngIf=\"posts.length <= 0 && !loading\" class=\"mat-body-1 info-text\">\n      No posts added yet.\n    </p>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ProfileHomeComponent } from './profile-home/profile-home.component';\n\nconst routes: Routes = [{ path: '', component: ProfileHomeComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProfileRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { ProfileHomeComponent } from './profile-home/profile-home.component';\nimport { EditProfileComponent } from './edit-profile/edit-profile.component';\nimport { EditPasswordComponent } from './edit-password/edit-password.component';\n\nimport { PostsModule } from '../posts/posts.module';\nimport { SharedModule } from 'src/app/shared-module/shared.module';\nimport { ProfileRoutingModule } from './profile-routing.module';\nimport { AngularMaterialModule } from 'src/app/angular-material.module';\n\n@NgModule({\n  declarations: [\n    ProfileHomeComponent,\n    EditProfileComponent,\n    EditPasswordComponent,\n  ],\n  imports: [\n    CommonModule,\n    ProfileRoutingModule,\n    PostsModule,\n    ReactiveFormsModule,\n    SharedModule,\n    AngularMaterialModule,\n  ],\n  entryComponents: [EditProfileComponent, EditPasswordComponent],\n})\nexport class ProfileModule {}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/feature-modules/auth/auth.service';\nimport { User } from 'src/app/interfaces/auth.model';\nimport { catchError, map } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProfileService {\n  private readonly url = '/api/user';\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private authService: AuthService\n  ) {}\n\n  updateMyProfile(formValues) {\n    this.http.put<User>(`${this.url}/me`, formValues).subscribe((user) => {\n      this.authService.user$.next(user);\n\n      this.reloadPage();\n    });\n  }\n\n  validateMyPassword(password) {\n    return this.http\n      .post<{ [key: string]: string }>(`${this.url}/me/password`, {\n        currentPassword: password,\n      })\n      .pipe(\n        map((res) => null),\n        catchError((err) => of({ invalidPassword: true }))\n      );\n  }\n\n  updateMyPassword(formValues) {\n    this.http\n      .patch<{ message: string }>(`${this.url}/me/password`, formValues)\n      .subscribe(() => {\n        this.reloadPage();\n      });\n  }\n\n  updateMyAvatar(avatar: File) {\n    const fd = new FormData();\n    fd.append('avatar', avatar);\n\n    this.http\n      .put<string>(`${this.url}/me/avatar`, fd)\n      .subscribe((avatarPath) => {\n        this.authService.user$.next({\n          ...this.authService.user$.getValue(),\n          avatar: avatarPath,\n        });\n\n        this.reloadPage();\n      });\n  }\n\n  private reloadPage() {\n    this.router.navigate(['profile'], {\n      queryParams: {\n        ts: Date.now().toString(),\n      },\n      queryParamsHandling: 'merge',\n      skipLocationChange: true,\n    });\n  }\n}\n","import { AbstractControl } from '@angular/forms';\nexport const confirmPasswordValidator = (form: AbstractControl) => {\n  const { newPassword, confirmedNewPassword } = form.value;\n\n  if (\n    form.get('newPassword').dirty &&\n    form.get('confirmedNewPassword').dirty &&\n    newPassword !== confirmedNewPassword\n  ) {\n    return { passwordNotMatch: true };\n  }\n\n  return null;\n};\n","import { Injectable } from '@angular/core';\nimport {\n  AbstractControl,\n  AsyncValidator,\n  ValidationErrors,\n} from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { ProfileService } from '../feature-modules/profile/profile.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ValidPassword implements AsyncValidator {\n  constructor(private profileService: ProfileService) {}\n\n  validate = (\n    control: AbstractControl\n  ): Observable<ValidationErrors | null> => {\n    return this.profileService.validateMyPassword(control.value);\n  };\n}\n"]}