{"version":3,"sources":["./src/app/feature-modules/profile/edit-password/edit-password.component.ts","./src/app/feature-modules/profile/edit-password/edit-password.component.html","./src/app/feature-modules/profile/edit-profile/edit-profile.component.ts","./src/app/feature-modules/profile/edit-profile/edit-profile.component.html","./src/app/feature-modules/profile/profile-home/profile-home.component.ts","./src/app/feature-modules/profile/profile-home/profile-home.component.html","./src/app/feature-modules/profile/profile-routing.module.ts","./src/app/feature-modules/profile/profile.module.ts","./src/app/feature-modules/profile/profile.service.ts","./src/app/validators/confrim-password.validator.ts","./src/app/validators/password.validator.ts"],"names":[],"mappings":"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","file":"feature-modules-profile-profile-module-es2015.js","sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { confirmPasswordValidator } from '../../../validators/confrim-password.validator';\nimport { ValidPassword } from '../../../validators/password.validator';\n\n@Component({\n  selector: 'app-edit-password',\n  templateUrl: './edit-password.component.html',\n  styleUrls: ['./edit-password.component.css'],\n})\nexport class EditPasswordComponent implements OnInit {\n  form: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private dialogRef: MatDialogRef<EditPasswordComponent>,\n    private validPassword: ValidPassword,\n    @Inject(MAT_DIALOG_DATA) data\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group(\n      {\n        currentPassword: ['', Validators.required, this.validPassword.validate],\n        newPassword: ['', Validators.required],\n        confirmedNewPassword: ['', Validators.required],\n      },\n      {\n        validators: [confirmPasswordValidator],\n      }\n    );\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n\n  onEditFormClick() {\n    this.form.markAllAsTouched();\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.dialogRef.close(this.form.value);\n  }\n}\n","<h2 mat-dialog-title>Change Password</h2>\n<form [formGroup]=\"form\" (ngSubmit)=\"onEditFormClick()\">\n  <mat-dialog-content>\n    <app-input\n      [control]=\"form.get('currentPassword')\"\n      label=\"Current Password\"\n      type=\"password\"\n    ></app-input>\n\n    <app-input\n      [control]=\"form.get('newPassword')\"\n      label=\"New Password\"\n      type=\"password\"\n    ></app-input>\n\n    <app-input\n      [control]=\"form.get('confirmedNewPassword')\"\n      label=\"Confrim new password\"\n      type=\"password\"\n    ></app-input>\n\n    <div *ngIf=\"form.invalid\">\n      <mat-error *ngIf=\"form.hasError('passwordNotMatch')\">\n        Password Not Match\n      </mat-error>\n    </div>\n  </mat-dialog-content>\n\n  <mat-dialog-actions align=\"end\">\n    <button (click)=\"close()\" type=\"button\" class=\"mat-raised-button\">\n      Close\n    </button>\n    <button\n      type=\"submit\"\n      mat-raised-button\n      color=\"primary\"\n      [disabled]=\"form.invalid || form.pending\"\n    >\n      Change\n    </button>\n  </mat-dialog-actions>\n</form>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-edit-profile',\n  templateUrl: './edit-profile.component.html',\n  styleUrls: ['./edit-profile.component.css'],\n})\nexport class EditProfileComponent implements OnInit {\n  form: FormGroup;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: { name: string },\n    private fb: FormBuilder,\n    private dialogRef: MatDialogRef<EditProfileComponent>\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      name: [this.data.name, Validators.required],\n    });\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n\n  onEditFormClick() {\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.dialogRef.close(this.form.value);\n  }\n}\n","<h2 mat-dialog-title>Edit Profile</h2>\n<form [formGroup]=\"form\" (ngSubmit)=\"onEditFormClick()\">\n  <mat-dialog-content>\n    <app-input [control]=\"form.get('name')\" label=\"Name\"></app-input>\n  </mat-dialog-content>\n\n  <mat-dialog-actions align=\"end\">\n    <button (click)=\"close()\" type=\"button\" class=\"mat-raised-button\">\n      Close\n    </button>\n    <button type=\"submit\" mat-raised-button color=\"primary\">Edit</button>\n  </mat-dialog-actions>\n</form>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\n\nimport { Subscription } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\n\nimport { User } from 'src/app/interfaces/auth.model';\nimport { Post } from 'src/app/interfaces/post.model';\n\nimport { PostsService } from '../../posts/posts.service';\nimport { ProfileService } from '../profile.service';\n\nimport { EditProfileComponent } from '../edit-profile/edit-profile.component';\nimport { EditPasswordComponent } from '../edit-password/edit-password.component';\nimport { AuthService } from 'src/app/feature-modules/auth/auth.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-profile-home',\n  templateUrl: './profile-home.component.html',\n  styleUrls: ['./profile-home.component.css'],\n})\nexport class ProfileHomeComponent implements OnInit, OnDestroy {\n  posts: Post[] = [];\n  loggedinUser: User;\n  loadingProfile: boolean;\n  loadingPost: boolean;\n  userSub: Subscription;\n  postSub: Subscription;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private postsService: PostsService,\n    private profileService: ProfileService,\n    private authService: AuthService,\n    public dialog: MatDialog\n  ) {}\n\n  ngOnInit(): void {\n    this.userSub = this.authService.user$.subscribe((user) => {\n      this.loadingProfile = false;\n      this.loggedinUser = user;\n    });\n\n    this.postSub = this.postsService.posts$.subscribe((posts) => {\n      this.loadingPost = false;\n      this.posts = posts;\n    });\n\n    // initiate posts and re-render after created new post\n    this.route.queryParamMap.subscribe(() => {\n      this.loadingPost = true;\n      this.postsService.fetchMyPosts();\n    });\n  }\n\n  onDeletePost(id: string) {\n    this.postsService.deleteMyPost(id);\n  }\n\n  onChangeAvatar(event: Event) {\n    this.loadingProfile = true;\n    const avatar = (event.target as HTMLInputElement).files[0];\n\n    this.profileService.updateMyAvatar(avatar).subscribe((avatarPath) => {\n      this.authService.user$.next({\n        ...this.loggedinUser,\n        avatar: avatarPath,\n      });\n      this.reloadPage();\n    });\n  }\n\n  onOpenDetailsModal() {\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n    dialogConfig.width = '500px';\n\n    dialogConfig.data = {\n      name: this.loggedinUser.name,\n    };\n\n    const dialogRef = this.dialog.open(EditProfileComponent, dialogConfig);\n\n    // receive the data after closing modal\n    dialogRef\n      .afterClosed()\n      .pipe(\n        filter((data) => !!data),\n        tap(() => (this.loadingProfile = true)),\n        switchMap((data) =>\n          this.profileService.updateMyProfile({\n            ...this.loggedinUser,\n            name: data.name,\n          })\n        )\n      )\n      .subscribe((user) => {\n        this.authService.user$.next(user);\n        this.reloadPage();\n      });\n  }\n\n  onOpenPasswordModal() {\n    const dialogConfig = new MatDialogConfig();\n\n    dialogConfig.disableClose = true;\n    dialogConfig.autoFocus = true;\n    dialogConfig.width = '500px';\n\n    const dialogRef = this.dialog.open(EditPasswordComponent, dialogConfig);\n\n    dialogRef\n      .afterClosed()\n      .pipe(\n        filter((data) => !!data),\n        tap(() => (this.loadingProfile = true)),\n        switchMap((data) => this.profileService.updateMyPassword(data))\n      )\n      .subscribe(() => {\n        this.loadingProfile = false;\n      });\n  }\n\n  onClickLike({ postId }) {\n    this.postsService.likePost(postId, this.loggedinUser._id);\n  }\n\n  ngOnDestroy() {\n    this.userSub.unsubscribe();\n    this.postSub.unsubscribe();\n  }\n\n  private reloadPage() {\n    this.router.navigate(['./'], {\n      relativeTo: this.route,\n      queryParams: { ts: Date.now().toString() },\n      skipLocationChange: true,\n      queryParamsHandling: 'merge',\n    });\n  }\n}\n","<app-spinner *ngIf=\"loadingProfile || loadingPost\"></app-spinner>\n\n<div *ngIf=\"loggedinUser && !loadingPost && !loadingProfile\" class=\"container\">\n  <div class=\"profile\">\n    <mat-card>\n      <div class=\"avatar-container\">\n        <img\n          class=\"avatar\"\n          mat-card-avatar\n          [src]=\"loggedinUser.avatar\"\n          (click)=\"avatar.click()\"\n        />\n        <input #avatar hidden type=\"file\" (change)=\"onChangeAvatar($event)\" />\n      </div>\n      <div class=\"info\">\n        <mat-card-title>{{ loggedinUser.name }}</mat-card-title>\n        <mat-card-subtitle>{{ loggedinUser.email }}</mat-card-subtitle>\n      </div>\n      <div class=\"card-actions\">\n        <button\n          id=\"edit-details\"\n          mat-stroked-button\n          onclick=\"this.blur()\"\n          (click)=\"onOpenDetailsModal()\"\n        >\n          <!-- Hack: onclick=\"this.blur()\" to get rid of .cdk-focused .cdk-program-focused-->\n          Edit Details\n        </button>\n        <button\n          id=\"change-password\"\n          mat-stroked-button\n          onclick=\"this.blur()\"\n          (click)=\"onOpenPasswordModal()\"\n        >\n          Change Password\n        </button>\n      </div>\n    </mat-card>\n  </div>\n\n  <div class=\"profile-right\">\n    <app-create-post></app-create-post>\n    <app-post-list\n      [posts]=\"posts\"\n      [loggedinUser]=\"loggedinUser\"\n      (deleteClicked)=\"onDeletePost($event)\"\n      (postLiked)=\"onClickLike($event)\"\n    ></app-post-list>\n\n    <p *ngIf=\"posts.length <= 0 && !loadingPost\" class=\"mat-body-1 info-text\">\n      No posts added yet.\n    </p>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ProfileHomeComponent } from './profile-home/profile-home.component';\n\nconst routes: Routes = [{ path: '', component: ProfileHomeComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProfileRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { ProfileHomeComponent } from './profile-home/profile-home.component';\nimport { EditProfileComponent } from './edit-profile/edit-profile.component';\nimport { EditPasswordComponent } from './edit-password/edit-password.component';\n\nimport { PostsModule } from '../posts/posts.module';\nimport { SharedModule } from 'src/app/shared-module/shared.module';\nimport { ProfileRoutingModule } from './profile-routing.module';\nimport { AngularMaterialModule } from 'src/app/angular-material.module';\n\n@NgModule({\n  declarations: [\n    ProfileHomeComponent,\n    EditProfileComponent,\n    EditPasswordComponent,\n  ],\n  imports: [\n    CommonModule,\n    ProfileRoutingModule,\n    PostsModule,\n    ReactiveFormsModule,\n    SharedModule,\n    AngularMaterialModule,\n  ],\n  entryComponents: [EditProfileComponent, EditPasswordComponent],\n})\nexport class ProfileModule {}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { User } from 'src/app/interfaces/auth.model';\nimport { catchError, map } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProfileService {\n  private readonly url = '/api/user';\n\n  constructor(private http: HttpClient) {}\n\n  updateMyProfile(formValues) {\n    return this.http.put<User>(`${this.url}/me`, formValues);\n  }\n\n  validateMyPassword(password) {\n    return this.http\n      .post<{ [key: string]: string }>(`${this.url}/me/password`, {\n        currentPassword: password,\n      })\n      .pipe(\n        map((res) => null),\n        catchError((err) => of({ invalidPassword: true }))\n      );\n  }\n\n  updateMyPassword(formValues) {\n    return this.http.patch<{ message: string }>(\n      `${this.url}/me/password`,\n      formValues\n    );\n  }\n\n  updateMyAvatar(avatar: File) {\n    const fd = new FormData();\n    fd.append('avatar', avatar);\n\n    return this.http.put<string>(`${this.url}/me/avatar`, fd);\n  }\n}\n","import { AbstractControl } from '@angular/forms';\nexport const confirmPasswordValidator = (form: AbstractControl) => {\n  const { newPassword, confirmedNewPassword } = form.value;\n\n  if (\n    form.get('newPassword').dirty &&\n    form.get('confirmedNewPassword').dirty &&\n    newPassword !== confirmedNewPassword\n  ) {\n    return { passwordNotMatch: true };\n  }\n\n  return null;\n};\n","import { Injectable } from '@angular/core';\nimport {\n  AbstractControl,\n  AsyncValidator,\n  ValidationErrors,\n} from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { ProfileService } from '../feature-modules/profile/profile.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ValidPassword implements AsyncValidator {\n  constructor(private profileService: ProfileService) {}\n\n  validate = (\n    control: AbstractControl\n  ): Observable<ValidationErrors | null> => {\n    return this.profileService.validateMyPassword(control.value);\n  };\n}\n"],"sourceRoot":"webpack:///"}